{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"190968180bd9b1b6f01c11ebf9d9c6e321edef62","modified":1689299387723},{"_id":"source/_posts/Mybatis-plus中，在新增或修改时，自动插入或修改某个字段值.md","hash":"f518bf8fed74d8dcb4fe87f6a6fb4fbdddbacaf6","modified":1689300176580},{"_id":"source/_posts/一行代码判断字符串是否为某格式的时间.md","hash":"85999eeec2279ddcd97b1ef108dd4e4b75ce0168","modified":1689299387727},{"_id":"source/_posts/一行代码关闭windows端口服务.md","hash":"dc82e1ae5518f8bbe9b7890f8355a2ca35bb569e","modified":1689299387727},{"_id":"source/_posts/以热爱为前提写代码-读码农翻身有感.md","hash":"a691458198d27230a1adabb3c35d6d3db3d98dc5","modified":1689299387728},{"_id":"source/_posts/网站介绍.md","hash":"e90892ae1aa7cbcc9b4b0e2af343ceeb64b229f1","modified":1689299387729},{"_id":"source/tags/index.md","hash":"c72636a39a741e55edce0985628e1ab8c7a5d727","modified":1689299387739},{"_id":"source/_posts/跨域问题后端配置，粘贴即用！.md","hash":"9a71a57b6cb57682f0d2d66596d1bdbdb7f9e5f7","modified":1689299387730},{"_id":"source/categories/index.md","hash":"21c6a5594b2fc434b04b8a9d51c666483d39ae90","modified":1689299387736},{"_id":"public/db.json","hash":"efd364020fe6da725cfcb9018dae13b02b324ce3","modified":1689300188578},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/2023/07/01/以热爱为前提写代码-读码农翻身有感/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/2023/06/27/一行代码判断字符串是否为某格式的时间/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/2023/06/01/跨域问题后端配置，粘贴即用！/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/2023/06/01/Mybatis-plus中，在新增或修改时，自动插入或修改某个字段值/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/2023/05/12/网站介绍/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/archives/2023/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/archives/2023/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/archives/2023/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/archives/2023/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/categories/一键系列/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/categories/记录/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/categories/从头创建一个新项目可能需要的配置/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/Windows/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/2023/06/27/一行代码关闭windows端口服务/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/端口/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/date/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/hutool/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/java/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/工具类/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/博客/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/网站/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/springboot/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/mybatis-plus/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/工具/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/跨域/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/配置类/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/技术/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/学习/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/写作/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/tags/感想/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1689300188578},{"_id":"public/CNAME","hash":"190968180bd9b1b6f01c11ebf9d9c6e321edef62","modified":1689300188578}],"Category":[{"name":"一键系列","_id":"clk1xps7m0004zk0g2ru4ekvk"},{"name":"记录","_id":"clk1xps7s000bzk0gbvll5y1x"},{"name":"从头创建一个新项目可能需要的配置","_id":"clk1xps7t000hzk0g5sjh7ptv"}],"Data":[],"Page":[{"title":"标签","date":"2023-05-11T13:50:59.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-05-11 21:50:59\ntype: \"tags\"\n---\n","updated":"2023-07-14T01:49:47.739Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clk1xps7e0000zk0g397q663i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2023-05-11T13:52:23.000Z","type":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-05-11 21:52:23\ntype: \"categories\"\n---\n\n","updated":"2023-07-14T01:49:47.736Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clk1xps7i0001zk0gau34dmtk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"一行代码关闭windows端口服务","date":"2023-06-27T02:41:00.000Z","author":"ice","_content":"\n### 1：一条代码\n\n```\nGet-Process -Id (Get-NetTCPConnection -LocalPort 10001).OwningProcess | Stop-Process -Force\n```\n\n注意：get-process命令需要打开Powershell终端才能运行\n\n![image-20230627104730737](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627104730737.png)\n\n\n\n**解释：**\n\n- 这是一条 PowerShell 命令，用于根据本地端口号查找对应的进程并强制结束它。下面是该命令的详细解释：\n\n  - `Get-NetTCPConnection -LocalPort 10001`：使用 `Get-NetTCPConnection` 命令查找本地使用 10001 端口的 TCP 连接。该命令返回了与该端口相关联的网络连接（如果有）。`-LocalPort` 参数指定要查找的本地端口号。\n\n  - `(Get-NetTCPConnection -LocalPort 10001).OwningProcess`：从上一条命令的输出中取出 `OwningProcess` 属性的值，即与本地端口相关联的进程 ID。\n\n  - `Get-Process -Id`：使用 `Get-Process` 命令查找与指定的进程 ID 相关联的进程对象。\n\n  - `| Stop-Process -Force`：使用管道将输出传递给 `Stop-Process` 命令，强制结束指定的进程。`-Force` 参数表示强制结束进程，即使进程不响应也要结束。\n\n  因此，该命令的作用是：查找本地端口号为 10001 的 TCP 连接，并通过该连接的 OwningProcess 属性获取进程 ID，然后使用 `Get-Process` 命令获取该进程对象，并将其传递给 `Stop-Process` 命令来强制结束该进程。这可以在需要停止指定端口上的进程时很有用。\n\n因此，这个命令的意思是：使用 `netstat` 工具查找所有使用 10001 端口的连接，并将每个连接的进程 ID 作为参数传递给 `taskkill` 命令，以便强制结束该进程。可以用类似其他端口的情况使用，只需要替换 \"10001\" 为想要查找和终止进程的端口号即可。\n\n### 2：普通方法\n\n我要关闭10001端口的进程：\n\n```\nnetstat -ano|findstr \"10001\"\n```\n\n结果：\n\n![image-20230627104318114](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627104318114.png)\n\n5928就是使用这个端口的进程编码，我们关闭这个端口：\n\n```\ntaskkill /f /pid 5928\n```\n\n搞定","source":"_posts/一行代码关闭windows端口服务.md","raw":"---\ntitle: 一行代码关闭windows端口服务\ndate: 2023-06-27 10:41:00\nauthor: ice\ntags:\n- Windows\n- 端口\ncategories:\n- 一键系列\n---\n\n### 1：一条代码\n\n```\nGet-Process -Id (Get-NetTCPConnection -LocalPort 10001).OwningProcess | Stop-Process -Force\n```\n\n注意：get-process命令需要打开Powershell终端才能运行\n\n![image-20230627104730737](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627104730737.png)\n\n\n\n**解释：**\n\n- 这是一条 PowerShell 命令，用于根据本地端口号查找对应的进程并强制结束它。下面是该命令的详细解释：\n\n  - `Get-NetTCPConnection -LocalPort 10001`：使用 `Get-NetTCPConnection` 命令查找本地使用 10001 端口的 TCP 连接。该命令返回了与该端口相关联的网络连接（如果有）。`-LocalPort` 参数指定要查找的本地端口号。\n\n  - `(Get-NetTCPConnection -LocalPort 10001).OwningProcess`：从上一条命令的输出中取出 `OwningProcess` 属性的值，即与本地端口相关联的进程 ID。\n\n  - `Get-Process -Id`：使用 `Get-Process` 命令查找与指定的进程 ID 相关联的进程对象。\n\n  - `| Stop-Process -Force`：使用管道将输出传递给 `Stop-Process` 命令，强制结束指定的进程。`-Force` 参数表示强制结束进程，即使进程不响应也要结束。\n\n  因此，该命令的作用是：查找本地端口号为 10001 的 TCP 连接，并通过该连接的 OwningProcess 属性获取进程 ID，然后使用 `Get-Process` 命令获取该进程对象，并将其传递给 `Stop-Process` 命令来强制结束该进程。这可以在需要停止指定端口上的进程时很有用。\n\n因此，这个命令的意思是：使用 `netstat` 工具查找所有使用 10001 端口的连接，并将每个连接的进程 ID 作为参数传递给 `taskkill` 命令，以便强制结束该进程。可以用类似其他端口的情况使用，只需要替换 \"10001\" 为想要查找和终止进程的端口号即可。\n\n### 2：普通方法\n\n我要关闭10001端口的进程：\n\n```\nnetstat -ano|findstr \"10001\"\n```\n\n结果：\n\n![image-20230627104318114](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627104318114.png)\n\n5928就是使用这个端口的进程编码，我们关闭这个端口：\n\n```\ntaskkill /f /pid 5928\n```\n\n搞定","slug":"一行代码关闭windows端口服务","published":1,"updated":"2023-07-14T01:49:47.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk1xps7i0002zk0gbff85k8w","content":"<h3 id=\"1：一条代码\"><a href=\"#1：一条代码\" class=\"headerlink\" title=\"1：一条代码\"></a>1：一条代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-Process -Id (Get-NetTCPConnection -LocalPort 10001).OwningProcess | Stop-Process -Force</span><br></pre></td></tr></table></figure>\n\n<p>注意：get-process命令需要打开Powershell终端才能运行</p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627104730737.png\" alt=\"image-20230627104730737\"></p>\n<p><strong>解释：</strong></p>\n<ul>\n<li><p>这是一条 PowerShell 命令，用于根据本地端口号查找对应的进程并强制结束它。下面是该命令的详细解释：</p>\n<ul>\n<li><p><code>Get-NetTCPConnection -LocalPort 10001</code>：使用 <code>Get-NetTCPConnection</code> 命令查找本地使用 10001 端口的 TCP 连接。该命令返回了与该端口相关联的网络连接（如果有）。<code>-LocalPort</code> 参数指定要查找的本地端口号。</p>\n</li>\n<li><p><code>(Get-NetTCPConnection -LocalPort 10001).OwningProcess</code>：从上一条命令的输出中取出 <code>OwningProcess</code> 属性的值，即与本地端口相关联的进程 ID。</p>\n</li>\n<li><p><code>Get-Process -Id</code>：使用 <code>Get-Process</code> 命令查找与指定的进程 ID 相关联的进程对象。</p>\n</li>\n<li><p><code>| Stop-Process -Force</code>：使用管道将输出传递给 <code>Stop-Process</code> 命令，强制结束指定的进程。<code>-Force</code> 参数表示强制结束进程，即使进程不响应也要结束。</p>\n</li>\n</ul>\n<p>因此，该命令的作用是：查找本地端口号为 10001 的 TCP 连接，并通过该连接的 OwningProcess 属性获取进程 ID，然后使用 <code>Get-Process</code> 命令获取该进程对象，并将其传递给 <code>Stop-Process</code> 命令来强制结束该进程。这可以在需要停止指定端口上的进程时很有用。</p>\n</li>\n</ul>\n<p>因此，这个命令的意思是：使用 <code>netstat</code> 工具查找所有使用 10001 端口的连接，并将每个连接的进程 ID 作为参数传递给 <code>taskkill</code> 命令，以便强制结束该进程。可以用类似其他端口的情况使用，只需要替换 “10001” 为想要查找和终止进程的端口号即可。</p>\n<h3 id=\"2：普通方法\"><a href=\"#2：普通方法\" class=\"headerlink\" title=\"2：普通方法\"></a>2：普通方法</h3><p>我要关闭10001端口的进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano|findstr &quot;10001&quot;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627104318114.png\" alt=\"image-20230627104318114\"></p>\n<p>5928就是使用这个端口的进程编码，我们关闭这个端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill /f /pid 5928</span><br></pre></td></tr></table></figure>\n\n<p>搞定</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1：一条代码\"><a href=\"#1：一条代码\" class=\"headerlink\" title=\"1：一条代码\"></a>1：一条代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-Process -Id (Get-NetTCPConnection -LocalPort 10001).OwningProcess | Stop-Process -Force</span><br></pre></td></tr></table></figure>\n\n<p>注意：get-process命令需要打开Powershell终端才能运行</p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627104730737.png\" alt=\"image-20230627104730737\"></p>\n<p><strong>解释：</strong></p>\n<ul>\n<li><p>这是一条 PowerShell 命令，用于根据本地端口号查找对应的进程并强制结束它。下面是该命令的详细解释：</p>\n<ul>\n<li><p><code>Get-NetTCPConnection -LocalPort 10001</code>：使用 <code>Get-NetTCPConnection</code> 命令查找本地使用 10001 端口的 TCP 连接。该命令返回了与该端口相关联的网络连接（如果有）。<code>-LocalPort</code> 参数指定要查找的本地端口号。</p>\n</li>\n<li><p><code>(Get-NetTCPConnection -LocalPort 10001).OwningProcess</code>：从上一条命令的输出中取出 <code>OwningProcess</code> 属性的值，即与本地端口相关联的进程 ID。</p>\n</li>\n<li><p><code>Get-Process -Id</code>：使用 <code>Get-Process</code> 命令查找与指定的进程 ID 相关联的进程对象。</p>\n</li>\n<li><p><code>| Stop-Process -Force</code>：使用管道将输出传递给 <code>Stop-Process</code> 命令，强制结束指定的进程。<code>-Force</code> 参数表示强制结束进程，即使进程不响应也要结束。</p>\n</li>\n</ul>\n<p>因此，该命令的作用是：查找本地端口号为 10001 的 TCP 连接，并通过该连接的 OwningProcess 属性获取进程 ID，然后使用 <code>Get-Process</code> 命令获取该进程对象，并将其传递给 <code>Stop-Process</code> 命令来强制结束该进程。这可以在需要停止指定端口上的进程时很有用。</p>\n</li>\n</ul>\n<p>因此，这个命令的意思是：使用 <code>netstat</code> 工具查找所有使用 10001 端口的连接，并将每个连接的进程 ID 作为参数传递给 <code>taskkill</code> 命令，以便强制结束该进程。可以用类似其他端口的情况使用，只需要替换 “10001” 为想要查找和终止进程的端口号即可。</p>\n<h3 id=\"2：普通方法\"><a href=\"#2：普通方法\" class=\"headerlink\" title=\"2：普通方法\"></a>2：普通方法</h3><p>我要关闭10001端口的进程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano|findstr &quot;10001&quot;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627104318114.png\" alt=\"image-20230627104318114\"></p>\n<p>5928就是使用这个端口的进程编码，我们关闭这个端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskkill /f /pid 5928</span><br></pre></td></tr></table></figure>\n\n<p>搞定</p>\n"},{"title":"一行代码判断字符串是否为某格式的时间","date":"2023-06-27T00:02:30.000Z","author":"ice","_content":"\n在开发中遇到需要判断某个字符串是否为某种格式（如`yyyyMMdd`、`yyyy-MM-dd`等）的时间的需求，没有找到已有的一键解决的api，所以自己写了一个\n\n方法本体：\n\n注：方法中的`ObjectUtil`和`DateUtil`均为hutool中的包\n\n```java\n    /**\n     * 判断字符串是否为指定格式的日期时间\n     *\n     * @param dateStr    需要检查的日期字符串\n     * @param dateFormat 指定的日期格式，例如：\"yyyyMMdd\", \"yyyy-MM-dd\", \"yyyy/MM/dd\" 等\n     * @return 如果字符串是指定格式的日期时间，返回 true;否则返回 false。\n     */\n\n    public static boolean isValidDateFormat(String dateStr, String dateFormat) {\n        if (ObjectUtil.isEmpty(dateStr)) {\n            return false;\n        }\n        try {\n            DateUtil.parse(dateStr, dateFormat); // 将字符串解析为日期对象，如果解析成功，则说明字符串是有效的日期格式；否则说明字符串不是有效的日期格式。\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n```\n\n\n\n测试：\n\n```java\n    /**\n     * 测试isValidDateFormat方法\n     * @param args\n     */\n    public static void main(String[] args) {\n\n        String dateStr = \"2021-03-44\"; // 需要检查的日期字符串\n        String dateFormat = \"yyyy-MM-dd\"; // 指定的日期格式\n        boolean isValidDate = isValidDateFormat(dateStr, dateFormat);\n        System.out.println(\"字符串 \" + dateStr + \" 是否为格式为 '\" + dateFormat + \"' 的时间：\" + isValidDate);\n    }\n```\n\n结果：\n\n```java\n字符串 2021-03-01 是否为格式为 'yyyy-MM-dd' 的时间：true\n字符串 2aaaa 是否为格式为 'yyyy-MM-dd' 的时间：false\n字符串 20230102 是否为格式为 'yyyyMMdd' 的时间：true\n```\n\n\n\n原理：\n\n定义了一个名为 `isValidDateFormat` 的方法，该方法接受两个参数：`dateStr`(需要检查的日期字符串)和 `dateFormat`(指定的日期格式)。方法内部使用 `DateUtil.parse()` 方法尝试将字符串解析为日期对象。如果解析成功且日期格式与指定的格式相符，则返回 `true`;否则返回 `false`。","source":"_posts/一行代码判断字符串是否为某格式的时间.md","raw":"---\ntitle: 一行代码判断字符串是否为某格式的时间\ndate: 2023-06-27 08:02:30\nauthor: ice\ntags:\n- date\n- hutool\n- java\n- 工具类\ncategories:\n- 一键系列\n---\n\n在开发中遇到需要判断某个字符串是否为某种格式（如`yyyyMMdd`、`yyyy-MM-dd`等）的时间的需求，没有找到已有的一键解决的api，所以自己写了一个\n\n方法本体：\n\n注：方法中的`ObjectUtil`和`DateUtil`均为hutool中的包\n\n```java\n    /**\n     * 判断字符串是否为指定格式的日期时间\n     *\n     * @param dateStr    需要检查的日期字符串\n     * @param dateFormat 指定的日期格式，例如：\"yyyyMMdd\", \"yyyy-MM-dd\", \"yyyy/MM/dd\" 等\n     * @return 如果字符串是指定格式的日期时间，返回 true;否则返回 false。\n     */\n\n    public static boolean isValidDateFormat(String dateStr, String dateFormat) {\n        if (ObjectUtil.isEmpty(dateStr)) {\n            return false;\n        }\n        try {\n            DateUtil.parse(dateStr, dateFormat); // 将字符串解析为日期对象，如果解析成功，则说明字符串是有效的日期格式；否则说明字符串不是有效的日期格式。\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n```\n\n\n\n测试：\n\n```java\n    /**\n     * 测试isValidDateFormat方法\n     * @param args\n     */\n    public static void main(String[] args) {\n\n        String dateStr = \"2021-03-44\"; // 需要检查的日期字符串\n        String dateFormat = \"yyyy-MM-dd\"; // 指定的日期格式\n        boolean isValidDate = isValidDateFormat(dateStr, dateFormat);\n        System.out.println(\"字符串 \" + dateStr + \" 是否为格式为 '\" + dateFormat + \"' 的时间：\" + isValidDate);\n    }\n```\n\n结果：\n\n```java\n字符串 2021-03-01 是否为格式为 'yyyy-MM-dd' 的时间：true\n字符串 2aaaa 是否为格式为 'yyyy-MM-dd' 的时间：false\n字符串 20230102 是否为格式为 'yyyyMMdd' 的时间：true\n```\n\n\n\n原理：\n\n定义了一个名为 `isValidDateFormat` 的方法，该方法接受两个参数：`dateStr`(需要检查的日期字符串)和 `dateFormat`(指定的日期格式)。方法内部使用 `DateUtil.parse()` 方法尝试将字符串解析为日期对象。如果解析成功且日期格式与指定的格式相符，则返回 `true`;否则返回 `false`。","slug":"一行代码判断字符串是否为某格式的时间","published":1,"updated":"2023-07-14T01:49:47.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk1xps7k0003zk0gbrtz2txs","content":"<p>在开发中遇到需要判断某个字符串是否为某种格式（如<code>yyyyMMdd</code>、<code>yyyy-MM-dd</code>等）的时间的需求，没有找到已有的一键解决的api，所以自己写了一个</p>\n<p>方法本体：</p>\n<p>注：方法中的<code>ObjectUtil</code>和<code>DateUtil</code>均为hutool中的包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断字符串是否为指定格式的日期时间</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> dateStr    需要检查的日期字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> dateFormat 指定的日期格式，例如：&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, &quot;yyyy/MM/dd&quot; 等</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 如果字符串是指定格式的日期时间，返回 true;否则返回 false。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidDateFormat</span><span class=\"params\">(String dateStr, String dateFormat)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ObjectUtil.isEmpty(dateStr)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        DateUtil.parse(dateStr, dateFormat); <span class=\"comment\">// 将字符串解析为日期对象，如果解析成功，则说明字符串是有效的日期格式；否则说明字符串不是有效的日期格式。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试isValidDateFormat方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">dateStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2021-03-44&quot;</span>; <span class=\"comment\">// 需要检查的日期字符串</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">dateFormat</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;yyyy-MM-dd&quot;</span>; <span class=\"comment\">// 指定的日期格式</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">isValidDate</span> <span class=\"operator\">=</span> isValidDateFormat(dateStr, dateFormat);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;字符串 &quot;</span> + dateStr + <span class=\"string\">&quot; 是否为格式为 &#x27;&quot;</span> + dateFormat + <span class=\"string\">&quot;&#x27; 的时间：&quot;</span> + isValidDate);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串 <span class=\"number\">2021</span>-<span class=\"number\">03</span>-<span class=\"number\">01</span> 是否为格式为 <span class=\"string\">&#x27;yyyy-MM-dd&#x27;</span> 的时间：<span class=\"literal\">true</span></span><br><span class=\"line\">字符串 2aaaa 是否为格式为 <span class=\"string\">&#x27;yyyy-MM-dd&#x27;</span> 的时间：<span class=\"literal\">false</span></span><br><span class=\"line\">字符串 <span class=\"number\">20230102</span> 是否为格式为 <span class=\"string\">&#x27;yyyyMMdd&#x27;</span> 的时间：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>原理：</p>\n<p>定义了一个名为 <code>isValidDateFormat</code> 的方法，该方法接受两个参数：<code>dateStr</code>(需要检查的日期字符串)和 <code>dateFormat</code>(指定的日期格式)。方法内部使用 <code>DateUtil.parse()</code> 方法尝试将字符串解析为日期对象。如果解析成功且日期格式与指定的格式相符，则返回 <code>true</code>;否则返回 <code>false</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在开发中遇到需要判断某个字符串是否为某种格式（如<code>yyyyMMdd</code>、<code>yyyy-MM-dd</code>等）的时间的需求，没有找到已有的一键解决的api，所以自己写了一个</p>\n<p>方法本体：</p>\n<p>注：方法中的<code>ObjectUtil</code>和<code>DateUtil</code>均为hutool中的包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断字符串是否为指定格式的日期时间</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> dateStr    需要检查的日期字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> dateFormat 指定的日期格式，例如：&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, &quot;yyyy/MM/dd&quot; 等</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 如果字符串是指定格式的日期时间，返回 true;否则返回 false。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidDateFormat</span><span class=\"params\">(String dateStr, String dateFormat)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ObjectUtil.isEmpty(dateStr)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        DateUtil.parse(dateStr, dateFormat); <span class=\"comment\">// 将字符串解析为日期对象，如果解析成功，则说明字符串是有效的日期格式；否则说明字符串不是有效的日期格式。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试isValidDateFormat方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">dateStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2021-03-44&quot;</span>; <span class=\"comment\">// 需要检查的日期字符串</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">dateFormat</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;yyyy-MM-dd&quot;</span>; <span class=\"comment\">// 指定的日期格式</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">isValidDate</span> <span class=\"operator\">=</span> isValidDateFormat(dateStr, dateFormat);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;字符串 &quot;</span> + dateStr + <span class=\"string\">&quot; 是否为格式为 &#x27;&quot;</span> + dateFormat + <span class=\"string\">&quot;&#x27; 的时间：&quot;</span> + isValidDate);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串 <span class=\"number\">2021</span>-<span class=\"number\">03</span>-<span class=\"number\">01</span> 是否为格式为 <span class=\"string\">&#x27;yyyy-MM-dd&#x27;</span> 的时间：<span class=\"literal\">true</span></span><br><span class=\"line\">字符串 2aaaa 是否为格式为 <span class=\"string\">&#x27;yyyy-MM-dd&#x27;</span> 的时间：<span class=\"literal\">false</span></span><br><span class=\"line\">字符串 <span class=\"number\">20230102</span> 是否为格式为 <span class=\"string\">&#x27;yyyyMMdd&#x27;</span> 的时间：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>原理：</p>\n<p>定义了一个名为 <code>isValidDateFormat</code> 的方法，该方法接受两个参数：<code>dateStr</code>(需要检查的日期字符串)和 <code>dateFormat</code>(指定的日期格式)。方法内部使用 <code>DateUtil.parse()</code> 方法尝试将字符串解析为日期对象。如果解析成功且日期格式与指定的格式相符，则返回 <code>true</code>;否则返回 <code>false</code>。</p>\n"},{"title":"网站介绍","date":"2023-05-12T01:02:39.000Z","author":"ice","top":1,"_content":"\n> 从2022年中开始，就已经有了创建自己的博客网站的想法，那个时候就找了使用hexo创建网站的文章，但那个时候没研究过前端，进度一直卡在一开始的node安装上，折腾出一个开始页面之后就有些懈怠了，再之后就不了了之。\n\n> 后来也有几次建站的想法，但因为毕业，找工作等原因一直搁置了，直到现在。\n\n> 我的本科是机械，因为对计算机行业的兴趣，在女朋友的支持下，转行到了互联网行业，目前在南京从事java后端的岗位。\n\n> 网站使用hexo框架，主题是butterfly。\n\n>网站的主页封面是原神中的角色，宵宫，是我在这个游戏中最爱的角色。我很爱她对生活的热情，同时也希望自己能对生活抱有更多的期待。\n\n>网站的名字取自我的外号以及女朋友的外号。之后我会在这个网站持续更新技术博客以及生活中的所思所想。\n\n> 未完待续...\n","source":"_posts/网站介绍.md","raw":"---\ntitle: 网站介绍\ndate: 2023-05-12 09:02:39\nauthor: ice\ntags:\n- 博客\n- 网站\ncategories:\n- 记录\ntop: 1\n---\n\n> 从2022年中开始，就已经有了创建自己的博客网站的想法，那个时候就找了使用hexo创建网站的文章，但那个时候没研究过前端，进度一直卡在一开始的node安装上，折腾出一个开始页面之后就有些懈怠了，再之后就不了了之。\n\n> 后来也有几次建站的想法，但因为毕业，找工作等原因一直搁置了，直到现在。\n\n> 我的本科是机械，因为对计算机行业的兴趣，在女朋友的支持下，转行到了互联网行业，目前在南京从事java后端的岗位。\n\n> 网站使用hexo框架，主题是butterfly。\n\n>网站的主页封面是原神中的角色，宵宫，是我在这个游戏中最爱的角色。我很爱她对生活的热情，同时也希望自己能对生活抱有更多的期待。\n\n>网站的名字取自我的外号以及女朋友的外号。之后我会在这个网站持续更新技术博客以及生活中的所思所想。\n\n> 未完待续...\n","slug":"网站介绍","published":1,"updated":"2023-07-14T01:49:47.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk1xps7o0006zk0gf6mx8qoj","content":"<blockquote>\n<p>从2022年中开始，就已经有了创建自己的博客网站的想法，那个时候就找了使用hexo创建网站的文章，但那个时候没研究过前端，进度一直卡在一开始的node安装上，折腾出一个开始页面之后就有些懈怠了，再之后就不了了之。</p>\n</blockquote>\n<blockquote>\n<p>后来也有几次建站的想法，但因为毕业，找工作等原因一直搁置了，直到现在。</p>\n</blockquote>\n<blockquote>\n<p>我的本科是机械，因为对计算机行业的兴趣，在女朋友的支持下，转行到了互联网行业，目前在南京从事java后端的岗位。</p>\n</blockquote>\n<blockquote>\n<p>网站使用hexo框架，主题是butterfly。</p>\n</blockquote>\n<blockquote>\n<p>网站的主页封面是原神中的角色，宵宫，是我在这个游戏中最爱的角色。我很爱她对生活的热情，同时也希望自己能对生活抱有更多的期待。</p>\n</blockquote>\n<blockquote>\n<p>网站的名字取自我的外号以及女朋友的外号。之后我会在这个网站持续更新技术博客以及生活中的所思所想。</p>\n</blockquote>\n<blockquote>\n<p>未完待续…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>从2022年中开始，就已经有了创建自己的博客网站的想法，那个时候就找了使用hexo创建网站的文章，但那个时候没研究过前端，进度一直卡在一开始的node安装上，折腾出一个开始页面之后就有些懈怠了，再之后就不了了之。</p>\n</blockquote>\n<blockquote>\n<p>后来也有几次建站的想法，但因为毕业，找工作等原因一直搁置了，直到现在。</p>\n</blockquote>\n<blockquote>\n<p>我的本科是机械，因为对计算机行业的兴趣，在女朋友的支持下，转行到了互联网行业，目前在南京从事java后端的岗位。</p>\n</blockquote>\n<blockquote>\n<p>网站使用hexo框架，主题是butterfly。</p>\n</blockquote>\n<blockquote>\n<p>网站的主页封面是原神中的角色，宵宫，是我在这个游戏中最爱的角色。我很爱她对生活的热情，同时也希望自己能对生活抱有更多的期待。</p>\n</blockquote>\n<blockquote>\n<p>网站的名字取自我的外号以及女朋友的外号。之后我会在这个网站持续更新技术博客以及生活中的所思所想。</p>\n</blockquote>\n<blockquote>\n<p>未完待续…</p>\n</blockquote>\n"},{"title":"Mybatis-plus中，在新增或修改时，自动插入或修改某个字段值","date":"2023-06-01T01:46:01.000Z","author":"ice","_content":"\n\n\n# 一 效果\n\n在新增User表的数据时，createTime为null\n\n![image-20230531133204052](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/b937d4d9b00ab747b9224b0d665d5dc0.png)\n\n使用mybatis-plus自带的save方法新增后，在数据库中有自动插入的当前时间的值\n\n![image-20230531133418819](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/b38d9729833e7ebbfc80ab60f5393a6a.png)\n\n# 二 实现原理\n\n> ##  MetaObjectHandler:元数据对象处理器\n\n说明:`MetaObjectHandler接口`是mybatisPlus为我们提供的的一个扩展接口，我们可以利用这个接口在我们`插入`或者`更新`数据的时候，`为一些字段指定默认值`。\n\n> 使用场景：公共字段填充，如updateTime、createTime、createUser、updateUser等公共字段的填充。\n\n# 三 使用步骤\n\n## 1 在实体类的公共字段上添加@TableField注解\n\n1. `@TableField(fill = FieldFill.INSERT)`：表示此字段只在插入/新增操作时更新数据；\n2. `@TableField(fill = FieldFill.INSERT_UPDATE)`：表示此字段在新增和修改操作时都更新数据；\n3. `@TableField(fill = FieldFill.UPDATE)`：表示此字段只在修改操作时更新数据；\n\n如下面代码中，createTime，updateTime，createUser都会在新增时更新数据，updateTime还会在修改时更新数据\n\n```java\n@TableName(value = \"article\")\n@Data\npublic class Article implements Serializable {\n    /**\n     * id\n     */\n    @TableId(type = IdType.ASSIGN_UUID)\n    private String id;\n    /**\n     * 图片地址\n     */\n    private String pictureUrl;\n    /**\n     * 标题\n     */\n    private String title;\n    /**\n     * 创建时间\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private String createTime;\n    /**\n     * 修改时间\n     */\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private String updateTime;\n\n    /**\n     * 创建人\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private String createUser;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n}\n```\n\n## 2 创建配置类实现`MetaObjectHandler`接口\n\n实现`MetaObjectHandler`接口，重写insertFill、updateFill方法\n\n使用接口中的setFieldValByName方法，找到我们之前的几个字段，并给字段赋值\n\n> 不要忘记@Component 注解\n\n如下代码：\n\n```java\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        this.setFieldValByName(\"createTime\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()), metaObject);\n        this.setFieldValByName(\"updateTime\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()), metaObject);    \n        this.setFieldValByName(\"createUser\", currrentUser.getNickname(), metaObject);\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        this.setFieldValByName(\"updateTime\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()), metaObject);\n\n    }\n}\n```\n\n\n\n","source":"_posts/Mybatis-plus中，在新增或修改时，自动插入或修改某个字段值.md","raw":"---\ntitle: Mybatis-plus中，在新增或修改时，自动插入或修改某个字段值\ndate: 2023-06-01 09:46:01\nauthor: ice\ntags:\n- springboot\n- java\n- mybatis-plus\n- 工具\ncategories:\n- 从头创建一个新项目可能需要的配置\n---\n\n\n\n# 一 效果\n\n在新增User表的数据时，createTime为null\n\n![image-20230531133204052](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/b937d4d9b00ab747b9224b0d665d5dc0.png)\n\n使用mybatis-plus自带的save方法新增后，在数据库中有自动插入的当前时间的值\n\n![image-20230531133418819](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/b38d9729833e7ebbfc80ab60f5393a6a.png)\n\n# 二 实现原理\n\n> ##  MetaObjectHandler:元数据对象处理器\n\n说明:`MetaObjectHandler接口`是mybatisPlus为我们提供的的一个扩展接口，我们可以利用这个接口在我们`插入`或者`更新`数据的时候，`为一些字段指定默认值`。\n\n> 使用场景：公共字段填充，如updateTime、createTime、createUser、updateUser等公共字段的填充。\n\n# 三 使用步骤\n\n## 1 在实体类的公共字段上添加@TableField注解\n\n1. `@TableField(fill = FieldFill.INSERT)`：表示此字段只在插入/新增操作时更新数据；\n2. `@TableField(fill = FieldFill.INSERT_UPDATE)`：表示此字段在新增和修改操作时都更新数据；\n3. `@TableField(fill = FieldFill.UPDATE)`：表示此字段只在修改操作时更新数据；\n\n如下面代码中，createTime，updateTime，createUser都会在新增时更新数据，updateTime还会在修改时更新数据\n\n```java\n@TableName(value = \"article\")\n@Data\npublic class Article implements Serializable {\n    /**\n     * id\n     */\n    @TableId(type = IdType.ASSIGN_UUID)\n    private String id;\n    /**\n     * 图片地址\n     */\n    private String pictureUrl;\n    /**\n     * 标题\n     */\n    private String title;\n    /**\n     * 创建时间\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private String createTime;\n    /**\n     * 修改时间\n     */\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private String updateTime;\n\n    /**\n     * 创建人\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private String createUser;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n}\n```\n\n## 2 创建配置类实现`MetaObjectHandler`接口\n\n实现`MetaObjectHandler`接口，重写insertFill、updateFill方法\n\n使用接口中的setFieldValByName方法，找到我们之前的几个字段，并给字段赋值\n\n> 不要忘记@Component 注解\n\n如下代码：\n\n```java\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        this.setFieldValByName(\"createTime\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()), metaObject);\n        this.setFieldValByName(\"updateTime\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()), metaObject);    \n        this.setFieldValByName(\"createUser\", currrentUser.getNickname(), metaObject);\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        this.setFieldValByName(\"updateTime\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()), metaObject);\n\n    }\n}\n```\n\n\n\n","slug":"Mybatis-plus中，在新增或修改时，自动插入或修改某个字段值","published":1,"updated":"2023-07-14T02:02:56.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk1xps7p0007zk0g5asedone","content":"<h1 id=\"一-效果\"><a href=\"#一-效果\" class=\"headerlink\" title=\"一 效果\"></a>一 效果</h1><p>在新增User表的数据时，createTime为null</p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/b937d4d9b00ab747b9224b0d665d5dc0.png\" alt=\"image-20230531133204052\"></p>\n<p>使用mybatis-plus自带的save方法新增后，在数据库中有自动插入的当前时间的值</p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/b38d9729833e7ebbfc80ab60f5393a6a.png\" alt=\"image-20230531133418819\"></p>\n<h1 id=\"二-实现原理\"><a href=\"#二-实现原理\" class=\"headerlink\" title=\"二 实现原理\"></a>二 实现原理</h1><blockquote>\n<h2 id=\"MetaObjectHandler-元数据对象处理器\"><a href=\"#MetaObjectHandler-元数据对象处理器\" class=\"headerlink\" title=\"MetaObjectHandler:元数据对象处理器\"></a>MetaObjectHandler:元数据对象处理器</h2></blockquote>\n<p>说明:<code>MetaObjectHandler接口</code>是mybatisPlus为我们提供的的一个扩展接口，我们可以利用这个接口在我们<code>插入</code>或者<code>更新</code>数据的时候，<code>为一些字段指定默认值</code>。</p>\n<blockquote>\n<p>使用场景：公共字段填充，如updateTime、createTime、createUser、updateUser等公共字段的填充。</p>\n</blockquote>\n<h1 id=\"三-使用步骤\"><a href=\"#三-使用步骤\" class=\"headerlink\" title=\"三 使用步骤\"></a>三 使用步骤</h1><h2 id=\"1-在实体类的公共字段上添加-TableField注解\"><a href=\"#1-在实体类的公共字段上添加-TableField注解\" class=\"headerlink\" title=\"1 在实体类的公共字段上添加@TableField注解\"></a>1 在实体类的公共字段上添加@TableField注解</h2><ol>\n<li><code>@TableField(fill = FieldFill.INSERT)</code>：表示此字段只在插入&#x2F;新增操作时更新数据；</li>\n<li><code>@TableField(fill = FieldFill.INSERT_UPDATE)</code>：表示此字段在新增和修改操作时都更新数据；</li>\n<li><code>@TableField(fill = FieldFill.UPDATE)</code>：表示此字段只在修改操作时更新数据；</li>\n</ol>\n<p>如下面代码中，createTime，updateTime，createUser都会在新增时更新数据，updateTime还会在修改时更新数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@TableName(value = &quot;article&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Article</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片地址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String pictureUrl;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标题</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String createTime;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String updateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建人</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String createUser;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(exist = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-创建配置类实现MetaObjectHandler接口\"><a href=\"#2-创建配置类实现MetaObjectHandler接口\" class=\"headerlink\" title=\"2 创建配置类实现MetaObjectHandler接口\"></a>2 创建配置类实现<code>MetaObjectHandler</code>接口</h2><p>实现<code>MetaObjectHandler</code>接口，重写insertFill、updateFill方法</p>\n<p>使用接口中的setFieldValByName方法，找到我们之前的几个字段，并给字段赋值</p>\n<blockquote>\n<p>不要忘记@Component 注解</p>\n</blockquote>\n<p>如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMetaObjectHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MetaObjectHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFieldValByName(<span class=\"string\">&quot;createTime&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()), metaObject);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFieldValByName(<span class=\"string\">&quot;updateTime&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()), metaObject);    </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFieldValByName(<span class=\"string\">&quot;createUser&quot;</span>, currrentUser.getNickname(), metaObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFieldValByName(<span class=\"string\">&quot;updateTime&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()), metaObject);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-效果\"><a href=\"#一-效果\" class=\"headerlink\" title=\"一 效果\"></a>一 效果</h1><p>在新增User表的数据时，createTime为null</p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/b937d4d9b00ab747b9224b0d665d5dc0.png\" alt=\"image-20230531133204052\"></p>\n<p>使用mybatis-plus自带的save方法新增后，在数据库中有自动插入的当前时间的值</p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/b38d9729833e7ebbfc80ab60f5393a6a.png\" alt=\"image-20230531133418819\"></p>\n<h1 id=\"二-实现原理\"><a href=\"#二-实现原理\" class=\"headerlink\" title=\"二 实现原理\"></a>二 实现原理</h1><blockquote>\n<h2 id=\"MetaObjectHandler-元数据对象处理器\"><a href=\"#MetaObjectHandler-元数据对象处理器\" class=\"headerlink\" title=\"MetaObjectHandler:元数据对象处理器\"></a>MetaObjectHandler:元数据对象处理器</h2></blockquote>\n<p>说明:<code>MetaObjectHandler接口</code>是mybatisPlus为我们提供的的一个扩展接口，我们可以利用这个接口在我们<code>插入</code>或者<code>更新</code>数据的时候，<code>为一些字段指定默认值</code>。</p>\n<blockquote>\n<p>使用场景：公共字段填充，如updateTime、createTime、createUser、updateUser等公共字段的填充。</p>\n</blockquote>\n<h1 id=\"三-使用步骤\"><a href=\"#三-使用步骤\" class=\"headerlink\" title=\"三 使用步骤\"></a>三 使用步骤</h1><h2 id=\"1-在实体类的公共字段上添加-TableField注解\"><a href=\"#1-在实体类的公共字段上添加-TableField注解\" class=\"headerlink\" title=\"1 在实体类的公共字段上添加@TableField注解\"></a>1 在实体类的公共字段上添加@TableField注解</h2><ol>\n<li><code>@TableField(fill = FieldFill.INSERT)</code>：表示此字段只在插入&#x2F;新增操作时更新数据；</li>\n<li><code>@TableField(fill = FieldFill.INSERT_UPDATE)</code>：表示此字段在新增和修改操作时都更新数据；</li>\n<li><code>@TableField(fill = FieldFill.UPDATE)</code>：表示此字段只在修改操作时更新数据；</li>\n</ol>\n<p>如下面代码中，createTime，updateTime，createUser都会在新增时更新数据，updateTime还会在修改时更新数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@TableName(value = &quot;article&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Article</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableId(type = IdType.ASSIGN_UUID)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片地址</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String pictureUrl;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标题</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String createTime;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 修改时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String updateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建人</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@TableField(fill = FieldFill.INSERT)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String createUser;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(exist = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-创建配置类实现MetaObjectHandler接口\"><a href=\"#2-创建配置类实现MetaObjectHandler接口\" class=\"headerlink\" title=\"2 创建配置类实现MetaObjectHandler接口\"></a>2 创建配置类实现<code>MetaObjectHandler</code>接口</h2><p>实现<code>MetaObjectHandler</code>接口，重写insertFill、updateFill方法</p>\n<p>使用接口中的setFieldValByName方法，找到我们之前的几个字段，并给字段赋值</p>\n<blockquote>\n<p>不要忘记@Component 注解</p>\n</blockquote>\n<p>如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMetaObjectHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MetaObjectHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFieldValByName(<span class=\"string\">&quot;createTime&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()), metaObject);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFieldValByName(<span class=\"string\">&quot;updateTime&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()), metaObject);    </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFieldValByName(<span class=\"string\">&quot;createUser&quot;</span>, currrentUser.getNickname(), metaObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateFill</span><span class=\"params\">(MetaObject metaObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setFieldValByName(<span class=\"string\">&quot;updateTime&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()), metaObject);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"跨域问题后端配置，粘贴即用！","date":"2023-06-01T02:03:34.000Z","author":"ice","_content":"\n直接新建一个CorsConfig类，把一下代码粘贴就可以了\n> 需要注意的是，设置允许跨域请求的源地址和请求头时，应该只允许必要的来源和请求头，以避免潜在的安全风险。\n> 另外，需要根据具体的业务需求，对跨域请求的有效时长进行合理的设置。\n```\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\n/**\n * @author ice\n */\n@Configuration\npublic class CorsConfig {\n\n    /**\n     * 当前跨域请求最大有效时长。这里默认1天\n     */\n    private static final long MAX_AGE = 24 * 60 * 60;\n\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        // 1 设置访问源地址\n        corsConfiguration.addAllowedOrigin(\"*\");\n        // 2 设置访问源请求头\n        corsConfiguration.addAllowedHeader(\"*\");\n        // 3 设置访问源请求方法\n        corsConfiguration.addAllowedMethod(\"*\");\n        corsConfiguration.setMaxAge(MAX_AGE);\n        // 4 对接口配置跨域设置\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return new CorsFilter(source);\n    }\n}\n```","source":"_posts/跨域问题后端配置，粘贴即用！.md","raw":"---\ntitle: 跨域问题后端配置，粘贴即用！\ndate: 2023-06-01 10:03:34\nauthor: ice\ntags:\n- springboot\n- java\n- 跨域\n- 配置类\ncategories:\n- 从头创建一个新项目可能需要的配置\n---\n\n直接新建一个CorsConfig类，把一下代码粘贴就可以了\n> 需要注意的是，设置允许跨域请求的源地址和请求头时，应该只允许必要的来源和请求头，以避免潜在的安全风险。\n> 另外，需要根据具体的业务需求，对跨域请求的有效时长进行合理的设置。\n```\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\n/**\n * @author ice\n */\n@Configuration\npublic class CorsConfig {\n\n    /**\n     * 当前跨域请求最大有效时长。这里默认1天\n     */\n    private static final long MAX_AGE = 24 * 60 * 60;\n\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        // 1 设置访问源地址\n        corsConfiguration.addAllowedOrigin(\"*\");\n        // 2 设置访问源请求头\n        corsConfiguration.addAllowedHeader(\"*\");\n        // 3 设置访问源请求方法\n        corsConfiguration.addAllowedMethod(\"*\");\n        corsConfiguration.setMaxAge(MAX_AGE);\n        // 4 对接口配置跨域设置\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return new CorsFilter(source);\n    }\n}\n```","slug":"跨域问题后端配置，粘贴即用！","published":1,"updated":"2023-07-14T01:49:47.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk1xps7q0008zk0gd3tlay0j","content":"<p>直接新建一个CorsConfig类，把一下代码粘贴就可以了</p>\n<blockquote>\n<p>需要注意的是，设置允许跨域请求的源地址和请求头时，应该只允许必要的来源和请求头，以避免潜在的安全风险。<br>另外，需要根据具体的业务需求，对跨域请求的有效时长进行合理的设置。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.web.cors.CorsConfiguration;</span><br><span class=\"line\">import org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class=\"line\">import org.springframework.web.filter.CorsFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author ice</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class CorsConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 当前跨域请求最大有效时长。这里默认1天</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final long MAX_AGE = 24 * 60 * 60;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public CorsFilter corsFilter() &#123;</span><br><span class=\"line\">        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">        CorsConfiguration corsConfiguration = new CorsConfiguration();</span><br><span class=\"line\">        // 1 设置访问源地址</span><br><span class=\"line\">        corsConfiguration.addAllowedOrigin(&quot;*&quot;);</span><br><span class=\"line\">        // 2 设置访问源请求头</span><br><span class=\"line\">        corsConfiguration.addAllowedHeader(&quot;*&quot;);</span><br><span class=\"line\">        // 3 设置访问源请求方法</span><br><span class=\"line\">        corsConfiguration.addAllowedMethod(&quot;*&quot;);</span><br><span class=\"line\">        corsConfiguration.setMaxAge(MAX_AGE);</span><br><span class=\"line\">        // 4 对接口配置跨域设置</span><br><span class=\"line\">        source.registerCorsConfiguration(&quot;/**&quot;, corsConfiguration);</span><br><span class=\"line\">        return new CorsFilter(source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>直接新建一个CorsConfig类，把一下代码粘贴就可以了</p>\n<blockquote>\n<p>需要注意的是，设置允许跨域请求的源地址和请求头时，应该只允许必要的来源和请求头，以避免潜在的安全风险。<br>另外，需要根据具体的业务需求，对跨域请求的有效时长进行合理的设置。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.web.cors.CorsConfiguration;</span><br><span class=\"line\">import org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class=\"line\">import org.springframework.web.filter.CorsFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author ice</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class CorsConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 当前跨域请求最大有效时长。这里默认1天</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static final long MAX_AGE = 24 * 60 * 60;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public CorsFilter corsFilter() &#123;</span><br><span class=\"line\">        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">        CorsConfiguration corsConfiguration = new CorsConfiguration();</span><br><span class=\"line\">        // 1 设置访问源地址</span><br><span class=\"line\">        corsConfiguration.addAllowedOrigin(&quot;*&quot;);</span><br><span class=\"line\">        // 2 设置访问源请求头</span><br><span class=\"line\">        corsConfiguration.addAllowedHeader(&quot;*&quot;);</span><br><span class=\"line\">        // 3 设置访问源请求方法</span><br><span class=\"line\">        corsConfiguration.addAllowedMethod(&quot;*&quot;);</span><br><span class=\"line\">        corsConfiguration.setMaxAge(MAX_AGE);</span><br><span class=\"line\">        // 4 对接口配置跨域设置</span><br><span class=\"line\">        source.registerCorsConfiguration(&quot;/**&quot;, corsConfiguration);</span><br><span class=\"line\">        return new CorsFilter(source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"以热爱为前提写代码-读码农翻身有感","date":"2023-07-01T14:48:00.000Z","author":"ice","_content":"\n![image-20230627101223207](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101223207.png)\n\n  今天阅读了码农翻身这本书，看到一半就去关注作者的公众号了，因为这本书真的太好看了。\n\n  我很少用好看来形容一本编程书籍，通常我会使用`专业`，`技术底蕴深厚`等词汇来形容此类书籍，不过码农翻身这本书也不仅仅是纯粹的编程书籍，它把很多知识点通过讲故事的方式讲解出来，让人在读完之后发出：'原来这个东西的原理是这样的呀'的感慨。\n\n![image-20230627101741033](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101741033.png)\n\n\n\n![image-20230627101830462](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101830462.png)\n\n  抱着去了解作者的心思，去关注了他的公众号 码农翻身。作者从一篇'我是一个线程'这篇文章开始发现，大家喜欢看故事，在故事中掌握技术，就沿着这条路走了下来：用故事讲解技术的本质。作者几年如一日的积累，现在以及有了数百篇文章。\n\n  用作者的话说，写文章，一方面可以更好的掌握知识，在面试时候也能让面试官看到你的专业性，另一方面，要是阅读量高，读者多了，偶尔还能打个广告赚赚外快，岂不快哉。\n\n  在之前，我关注了很多写技术文的博主，他们或多或少也说过这样的话，而他却让我忽然心向往之。我想了想，应该是因为我也是很爱读故事的人，见到作者，就好像遇到了志同道合的道友一般，他提供的养分，被我这块挑剔的海绵急切的吸取着，让我同时在技术和精神上得到了满足。（还有一个原因是作者很喜欢郑渊洁，好巧，我也是哈哈哈）\n\n  写文章，如果能一直坚持下去，应该也是一件很了不起的事情吧。","source":"_posts/以热爱为前提写代码-读码农翻身有感.md","raw":"---\ntitle: 以热爱为前提写代码-读码农翻身有感\ndate: 2023-07-01 22:48:00\nauthor: ice\ntags:\n- 技术\n- 学习\n- 感想\n- 写作\ncategories:\n- 记录\n---\n\n![image-20230627101223207](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101223207.png)\n\n  今天阅读了码农翻身这本书，看到一半就去关注作者的公众号了，因为这本书真的太好看了。\n\n  我很少用好看来形容一本编程书籍，通常我会使用`专业`，`技术底蕴深厚`等词汇来形容此类书籍，不过码农翻身这本书也不仅仅是纯粹的编程书籍，它把很多知识点通过讲故事的方式讲解出来，让人在读完之后发出：'原来这个东西的原理是这样的呀'的感慨。\n\n![image-20230627101741033](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101741033.png)\n\n\n\n![image-20230627101830462](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101830462.png)\n\n  抱着去了解作者的心思，去关注了他的公众号 码农翻身。作者从一篇'我是一个线程'这篇文章开始发现，大家喜欢看故事，在故事中掌握技术，就沿着这条路走了下来：用故事讲解技术的本质。作者几年如一日的积累，现在以及有了数百篇文章。\n\n  用作者的话说，写文章，一方面可以更好的掌握知识，在面试时候也能让面试官看到你的专业性，另一方面，要是阅读量高，读者多了，偶尔还能打个广告赚赚外快，岂不快哉。\n\n  在之前，我关注了很多写技术文的博主，他们或多或少也说过这样的话，而他却让我忽然心向往之。我想了想，应该是因为我也是很爱读故事的人，见到作者，就好像遇到了志同道合的道友一般，他提供的养分，被我这块挑剔的海绵急切的吸取着，让我同时在技术和精神上得到了满足。（还有一个原因是作者很喜欢郑渊洁，好巧，我也是哈哈哈）\n\n  写文章，如果能一直坚持下去，应该也是一件很了不起的事情吧。","slug":"以热爱为前提写代码-读码农翻身有感","published":1,"updated":"2023-07-14T01:49:47.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk1xps7z001dzk0ghglfdgrg","content":"<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101223207.png\" alt=\"image-20230627101223207\"></p>\n<p>  今天阅读了码农翻身这本书，看到一半就去关注作者的公众号了，因为这本书真的太好看了。</p>\n<p>  我很少用好看来形容一本编程书籍，通常我会使用<code>专业</code>，<code>技术底蕴深厚</code>等词汇来形容此类书籍，不过码农翻身这本书也不仅仅是纯粹的编程书籍，它把很多知识点通过讲故事的方式讲解出来，让人在读完之后发出：’原来这个东西的原理是这样的呀’的感慨。</p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101741033.png\" alt=\"image-20230627101741033\"></p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101830462.png\" alt=\"image-20230627101830462\"></p>\n<p>  抱着去了解作者的心思，去关注了他的公众号 码农翻身。作者从一篇’我是一个线程’这篇文章开始发现，大家喜欢看故事，在故事中掌握技术，就沿着这条路走了下来：用故事讲解技术的本质。作者几年如一日的积累，现在以及有了数百篇文章。</p>\n<p>  用作者的话说，写文章，一方面可以更好的掌握知识，在面试时候也能让面试官看到你的专业性，另一方面，要是阅读量高，读者多了，偶尔还能打个广告赚赚外快，岂不快哉。</p>\n<p>  在之前，我关注了很多写技术文的博主，他们或多或少也说过这样的话，而他却让我忽然心向往之。我想了想，应该是因为我也是很爱读故事的人，见到作者，就好像遇到了志同道合的道友一般，他提供的养分，被我这块挑剔的海绵急切的吸取着，让我同时在技术和精神上得到了满足。（还有一个原因是作者很喜欢郑渊洁，好巧，我也是哈哈哈）</p>\n<p>  写文章，如果能一直坚持下去，应该也是一件很了不起的事情吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101223207.png\" alt=\"image-20230627101223207\"></p>\n<p>  今天阅读了码农翻身这本书，看到一半就去关注作者的公众号了，因为这本书真的太好看了。</p>\n<p>  我很少用好看来形容一本编程书籍，通常我会使用<code>专业</code>，<code>技术底蕴深厚</code>等词汇来形容此类书籍，不过码农翻身这本书也不仅仅是纯粹的编程书籍，它把很多知识点通过讲故事的方式讲解出来，让人在读完之后发出：’原来这个东西的原理是这样的呀’的感慨。</p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101741033.png\" alt=\"image-20230627101741033\"></p>\n<p><img src=\"https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101830462.png\" alt=\"image-20230627101830462\"></p>\n<p>  抱着去了解作者的心思，去关注了他的公众号 码农翻身。作者从一篇’我是一个线程’这篇文章开始发现，大家喜欢看故事，在故事中掌握技术，就沿着这条路走了下来：用故事讲解技术的本质。作者几年如一日的积累，现在以及有了数百篇文章。</p>\n<p>  用作者的话说，写文章，一方面可以更好的掌握知识，在面试时候也能让面试官看到你的专业性，另一方面，要是阅读量高，读者多了，偶尔还能打个广告赚赚外快，岂不快哉。</p>\n<p>  在之前，我关注了很多写技术文的博主，他们或多或少也说过这样的话，而他却让我忽然心向往之。我想了想，应该是因为我也是很爱读故事的人，见到作者，就好像遇到了志同道合的道友一般，他提供的养分，被我这块挑剔的海绵急切的吸取着，让我同时在技术和精神上得到了满足。（还有一个原因是作者很喜欢郑渊洁，好巧，我也是哈哈哈）</p>\n<p>  写文章，如果能一直坚持下去，应该也是一件很了不起的事情吧。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clk1xps7i0002zk0gbff85k8w","category_id":"clk1xps7m0004zk0g2ru4ekvk","_id":"clk1xps7s000czk0gh0t7a6f8"},{"post_id":"clk1xps7k0003zk0gbrtz2txs","category_id":"clk1xps7m0004zk0g2ru4ekvk","_id":"clk1xps7t000fzk0ga17ydtag"},{"post_id":"clk1xps7o0006zk0gf6mx8qoj","category_id":"clk1xps7s000bzk0gbvll5y1x","_id":"clk1xps7u000jzk0g6l073rhr"},{"post_id":"clk1xps7p0007zk0g5asedone","category_id":"clk1xps7t000hzk0g5sjh7ptv","_id":"clk1xps7u000mzk0ggkelbpgs"},{"post_id":"clk1xps7q0008zk0gd3tlay0j","category_id":"clk1xps7t000hzk0g5sjh7ptv","_id":"clk1xps7v000ozk0g9ps7259e"},{"post_id":"clk1xps7z001dzk0ghglfdgrg","category_id":"clk1xps7s000bzk0gbvll5y1x","_id":"clk1xps7z001fzk0g2orjg8kb"}],"PostTag":[{"post_id":"clk1xps7i0002zk0gbff85k8w","tag_id":"clk1xps7o0005zk0g7k5cgg47","_id":"clk1xps7t000ezk0g7yiw2voz"},{"post_id":"clk1xps7i0002zk0gbff85k8w","tag_id":"clk1xps7q000azk0g8mco4mzv","_id":"clk1xps7t000gzk0gfuophm18"},{"post_id":"clk1xps7k0003zk0gbrtz2txs","tag_id":"clk1xps7s000dzk0g09czfocv","_id":"clk1xps7v000qzk0g72red026"},{"post_id":"clk1xps7k0003zk0gbrtz2txs","tag_id":"clk1xps7t000izk0g5gn37e8w","_id":"clk1xps7v000rzk0gdma9egwe"},{"post_id":"clk1xps7k0003zk0gbrtz2txs","tag_id":"clk1xps7u000lzk0gejpj74c6","_id":"clk1xps7v000tzk0g93ewgi7u"},{"post_id":"clk1xps7k0003zk0gbrtz2txs","tag_id":"clk1xps7u000nzk0g6vp94n2n","_id":"clk1xps7v000uzk0gb7rsh9zx"},{"post_id":"clk1xps7o0006zk0gf6mx8qoj","tag_id":"clk1xps7v000pzk0g5m5ocbs9","_id":"clk1xps7w000wzk0gbkye8e2p"},{"post_id":"clk1xps7o0006zk0gf6mx8qoj","tag_id":"clk1xps7v000szk0g5h4e2m81","_id":"clk1xps7w000xzk0gdq3i6ffe"},{"post_id":"clk1xps7p0007zk0g5asedone","tag_id":"clk1xps7v000vzk0g6eufcrmo","_id":"clk1xps7x0012zk0g5vpi6dfe"},{"post_id":"clk1xps7p0007zk0g5asedone","tag_id":"clk1xps7u000lzk0gejpj74c6","_id":"clk1xps7x0013zk0gfpbmaqoe"},{"post_id":"clk1xps7p0007zk0g5asedone","tag_id":"clk1xps7w000zzk0g9xkmabjz","_id":"clk1xps7x0015zk0gasondw1l"},{"post_id":"clk1xps7p0007zk0g5asedone","tag_id":"clk1xps7w0010zk0g6oef0naj","_id":"clk1xps7x0016zk0ghtm762jh"},{"post_id":"clk1xps7q0008zk0gd3tlay0j","tag_id":"clk1xps7v000vzk0g6eufcrmo","_id":"clk1xps7y0019zk0g574c7zqq"},{"post_id":"clk1xps7q0008zk0gd3tlay0j","tag_id":"clk1xps7u000lzk0gejpj74c6","_id":"clk1xps7y001azk0g2ko69h53"},{"post_id":"clk1xps7q0008zk0gd3tlay0j","tag_id":"clk1xps7x0017zk0g1l2c6lcn","_id":"clk1xps7y001bzk0g8pg9byu6"},{"post_id":"clk1xps7q0008zk0gd3tlay0j","tag_id":"clk1xps7x0018zk0gbirw18jr","_id":"clk1xps7y001czk0g6ftp365h"},{"post_id":"clk1xps7z001dzk0ghglfdgrg","tag_id":"clk1xps7z001ezk0gg9ym9kfv","_id":"clk1xps80001jzk0g4o2de9ow"},{"post_id":"clk1xps7z001dzk0ghglfdgrg","tag_id":"clk1xps80001gzk0g9kzoh81x","_id":"clk1xps80001kzk0ga296925j"},{"post_id":"clk1xps7z001dzk0ghglfdgrg","tag_id":"clk1xps80001hzk0g3mirct3y","_id":"clk1xps80001lzk0ggjbcb5hy"},{"post_id":"clk1xps7z001dzk0ghglfdgrg","tag_id":"clk1xps80001izk0ghc9uesu3","_id":"clk1xps80001mzk0g8w676b4z"}],"Tag":[{"name":"Windows","_id":"clk1xps7o0005zk0g7k5cgg47"},{"name":"端口","_id":"clk1xps7q000azk0g8mco4mzv"},{"name":"date","_id":"clk1xps7s000dzk0g09czfocv"},{"name":"hutool","_id":"clk1xps7t000izk0g5gn37e8w"},{"name":"java","_id":"clk1xps7u000lzk0gejpj74c6"},{"name":"工具类","_id":"clk1xps7u000nzk0g6vp94n2n"},{"name":"博客","_id":"clk1xps7v000pzk0g5m5ocbs9"},{"name":"网站","_id":"clk1xps7v000szk0g5h4e2m81"},{"name":"springboot","_id":"clk1xps7v000vzk0g6eufcrmo"},{"name":"mybatis-plus","_id":"clk1xps7w000zzk0g9xkmabjz"},{"name":"工具","_id":"clk1xps7w0010zk0g6oef0naj"},{"name":"跨域","_id":"clk1xps7x0017zk0g1l2c6lcn"},{"name":"配置类","_id":"clk1xps7x0018zk0gbirw18jr"},{"name":"技术","_id":"clk1xps7z001ezk0gg9ym9kfv"},{"name":"学习","_id":"clk1xps80001gzk0g9kzoh81x"},{"name":"感想","_id":"clk1xps80001hzk0g3mirct3y"},{"name":"写作","_id":"clk1xps80001izk0ghc9uesu3"}]}}