[{"title":"以热爱为前提写代码-读码农翻身有感","url":"/2023/07/01/以热爱为前提写代码-读码农翻身有感/","content":"\n![image-20230627101223207](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101223207.png)\n\n  今天阅读了码农翻身这本书，看到一半就去关注作者的公众号了，因为这本书真的太好看了。\n\n  我很少用好看来形容一本编程书籍，通常我会使用`专业`，`技术底蕴深厚`等词汇来形容此类书籍，不过码农翻身这本书也不仅仅是纯粹的编程书籍，它把很多知识点通过讲故事的方式讲解出来，让人在读完之后发出：'原来这个东西的原理是这样的呀'的感慨。\n\n![image-20230627101741033](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101741033.png)\n\n\n\n![image-20230627101830462](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627101830462.png)\n\n  抱着去了解作者的心思，去关注了他的公众号 码农翻身。作者从一篇'我是一个线程'这篇文章开始发现，大家喜欢看故事，在故事中掌握技术，就沿着这条路走了下来：用故事讲解技术的本质。作者几年如一日的积累，现在以及有了数百篇文章。\n\n  用作者的话说，写文章，一方面可以更好的掌握知识，在面试时候也能让面试官看到你的专业性，另一方面，要是阅读量高，读者多了，偶尔还能打个广告赚赚外快，岂不快哉。\n\n  在之前，我关注了很多写技术文的博主，他们或多或少也说过这样的话，而他却让我忽然心向往之。我想了想，应该是因为我也是很爱读故事的人，见到作者，就好像遇到了志同道合的道友一般，他提供的养分，被我这块挑剔的海绵急切的吸取着，让我同时在技术和精神上得到了满足。（还有一个原因是作者很喜欢郑渊洁，好巧，我也是哈哈哈）\n\n  写文章，如果能一直坚持下去，应该也是一件很了不起的事情吧。","tags":["技术","学习","感想","写作"],"categories":["记录"]},{"title":"一行代码关闭windows端口服务","url":"/2023/06/27/一行代码关闭windows端口服务/","content":"\n### 1：一条代码\n\n```\nGet-Process -Id (Get-NetTCPConnection -LocalPort 10001).OwningProcess | Stop-Process -Force\n```\n\n注意：get-process命令需要打开Powershell终端才能运行\n\n![image-20230627104730737](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627104730737.png)\n\n\n\n**解释：**\n\n- 这是一条 PowerShell 命令，用于根据本地端口号查找对应的进程并强制结束它。下面是该命令的详细解释：\n\n  - `Get-NetTCPConnection -LocalPort 10001`：使用 `Get-NetTCPConnection` 命令查找本地使用 10001 端口的 TCP 连接。该命令返回了与该端口相关联的网络连接（如果有）。`-LocalPort` 参数指定要查找的本地端口号。\n\n  - `(Get-NetTCPConnection -LocalPort 10001).OwningProcess`：从上一条命令的输出中取出 `OwningProcess` 属性的值，即与本地端口相关联的进程 ID。\n\n  - `Get-Process -Id`：使用 `Get-Process` 命令查找与指定的进程 ID 相关联的进程对象。\n\n  - `| Stop-Process -Force`：使用管道将输出传递给 `Stop-Process` 命令，强制结束指定的进程。`-Force` 参数表示强制结束进程，即使进程不响应也要结束。\n\n  因此，该命令的作用是：查找本地端口号为 10001 的 TCP 连接，并通过该连接的 OwningProcess 属性获取进程 ID，然后使用 `Get-Process` 命令获取该进程对象，并将其传递给 `Stop-Process` 命令来强制结束该进程。这可以在需要停止指定端口上的进程时很有用。\n\n因此，这个命令的意思是：使用 `netstat` 工具查找所有使用 10001 端口的连接，并将每个连接的进程 ID 作为参数传递给 `taskkill` 命令，以便强制结束该进程。可以用类似其他端口的情况使用，只需要替换 \"10001\" 为想要查找和终止进程的端口号即可。\n\n### 2：普通方法\n\n我要关闭10001端口的进程：\n\n```\nnetstat -ano|findstr \"10001\"\n```\n\n结果：\n\n![image-20230627104318114](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/image-20230627104318114.png)\n\n5928就是使用这个端口的进程编码，我们关闭这个端口：\n\n```\ntaskkill /f /pid 5928\n```\n\n搞定","tags":["Windows","端口"],"categories":["一键系列"]},{"title":"一行代码判断字符串是否为某格式的时间","url":"/2023/06/27/一行代码判断字符串是否为某格式的时间/","content":"\n在开发中遇到需要判断某个字符串是否为某种格式（如`yyyyMMdd`、`yyyy-MM-dd`等）的时间的需求，没有找到已有的一键解决的api，所以自己写了一个\n\n方法本体：\n\n注：方法中的`ObjectUtil`和`DateUtil`均为hutool中的包\n\n```java\n    /**\n     * 判断字符串是否为指定格式的日期时间\n     *\n     * @param dateStr    需要检查的日期字符串\n     * @param dateFormat 指定的日期格式，例如：\"yyyyMMdd\", \"yyyy-MM-dd\", \"yyyy/MM/dd\" 等\n     * @return 如果字符串是指定格式的日期时间，返回 true;否则返回 false。\n     */\n\n    public static boolean isValidDateFormat(String dateStr, String dateFormat) {\n        if (ObjectUtil.isEmpty(dateStr)) {\n            return false;\n        }\n        try {\n            DateUtil.parse(dateStr, dateFormat); // 将字符串解析为日期对象，如果解析成功，则说明字符串是有效的日期格式；否则说明字符串不是有效的日期格式。\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n```\n\n\n\n测试：\n\n```java\n    /**\n     * 测试isValidDateFormat方法\n     * @param args\n     */\n    public static void main(String[] args) {\n\n        String dateStr = \"2021-03-44\"; // 需要检查的日期字符串\n        String dateFormat = \"yyyy-MM-dd\"; // 指定的日期格式\n        boolean isValidDate = isValidDateFormat(dateStr, dateFormat);\n        System.out.println(\"字符串 \" + dateStr + \" 是否为格式为 '\" + dateFormat + \"' 的时间：\" + isValidDate);\n    }\n```\n\n结果：\n\n```java\n字符串 2021-03-01 是否为格式为 'yyyy-MM-dd' 的时间：true\n字符串 2aaaa 是否为格式为 'yyyy-MM-dd' 的时间：false\n字符串 20230102 是否为格式为 'yyyyMMdd' 的时间：true\n```\n\n\n\n原理：\n\n定义了一个名为 `isValidDateFormat` 的方法，该方法接受两个参数：`dateStr`(需要检查的日期字符串)和 `dateFormat`(指定的日期格式)。方法内部使用 `DateUtil.parse()` 方法尝试将字符串解析为日期对象。如果解析成功且日期格式与指定的格式相符，则返回 `true`;否则返回 `false`。","tags":["date","hutool","java","工具类"],"categories":["一键系列"]},{"title":"跨域问题后端配置，粘贴即用！","url":"/2023/06/01/跨域问题后端配置，粘贴即用！/","content":"\n直接新建一个CorsConfig类，把一下代码粘贴就可以了\n> 需要注意的是，设置允许跨域请求的源地址和请求头时，应该只允许必要的来源和请求头，以避免潜在的安全风险。\n> 另外，需要根据具体的业务需求，对跨域请求的有效时长进行合理的设置。\n```\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\n/**\n * @author ice\n */\n@Configuration\npublic class CorsConfig {\n\n    /**\n     * 当前跨域请求最大有效时长。这里默认1天\n     */\n    private static final long MAX_AGE = 24 * 60 * 60;\n\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n        // 1 设置访问源地址\n        corsConfiguration.addAllowedOrigin(\"*\");\n        // 2 设置访问源请求头\n        corsConfiguration.addAllowedHeader(\"*\");\n        // 3 设置访问源请求方法\n        corsConfiguration.addAllowedMethod(\"*\");\n        corsConfiguration.setMaxAge(MAX_AGE);\n        // 4 对接口配置跨域设置\n        source.registerCorsConfiguration(\"/**\", corsConfiguration);\n        return new CorsFilter(source);\n    }\n}\n```","tags":["java","springboot","跨域","配置类"],"categories":["从头创建一个新项目可能需要的配置"]},{"title":"Mybatis-plus中，在新增或修改时，自动插入或修改某个字段值","url":"/2023/06/01/Mybatis-plus中，在新增或修改时，自动插入或修改某个字段值/","content":"\n\n\n# 一 效果\n\n在新增User表的数据时，createTime为null\n\n![image-20230531133204052](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/b937d4d9b00ab747b9224b0d665d5dc0.png)\n\n使用mybatis-plus自带的save方法新增后，在数据库中有自动插入的当前时间的值\n\n![image-20230531133418819](https://icepeachpicture.oss-cn-shanghai.aliyuncs.com/ice/b38d9729833e7ebbfc80ab60f5393a6a.png)\n\n# 二 实现原理\n\n> ##  MetaObjectHandler:元数据对象处理器\n\n说明:`MetaObjectHandler接口`是mybatisPlus为我们提供的的一个扩展接口，我们可以利用这个接口在我们`插入`或者`更新`数据的时候，`为一些字段指定默认值`。\n\n> 使用场景：公共字段填充，如updateTime、createTime、createUser、updateUser等公共字段的填充。\n\n# 三 使用步骤\n\n## 1 在实体类的公共字段上添加@TableField注解\n\n1. `@TableField(fill = FieldFill.INSERT)`：表示此字段只在插入/新增操作时更新数据；\n2. `@TableField(fill = FieldFill.INSERT_UPDATE)`：表示此字段在新增和修改操作时都更新数据；\n3. `@TableField(fill = FieldFill.UPDATE)`：表示此字段只在修改操作时更新数据；\n\n如下面代码中，createTime，updateTime，createUser都会在新增时更新数据，updateTime还会在修改时更新数据\n\n```java\n@TableName(value = \"article\")\n@Data\npublic class Article implements Serializable {\n    /**\n     * id\n     */\n    @TableId(type = IdType.ASSIGN_UUID)\n    private String id;\n    /**\n     * 图片地址\n     */\n    private String pictureUrl;\n    /**\n     * 标题\n     */\n    private String title;\n    /**\n     * 创建时间\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private String createTime;\n    /**\n     * 修改时间\n     */\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n    private String updateTime;\n\n    /**\n     * 创建人\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private String createUser;\n\n    @TableField(exist = false)\n    private static final long serialVersionUID = 1L;\n}\n```\n\n## 2 创建配置类实现`MetaObjectHandler`接口\n\n实现`MetaObjectHandler`接口，重写insertFill、updateFill方法\n\n使用接口中的setFieldValByName方法，找到我们之前的几个字段，并给字段赋值\n\n> 不要忘记@Component 注解\n\n如下代码：\n\n```java\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        this.setFieldValByName(\"createTime\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()), metaObject);\n        this.setFieldValByName(\"updateTime\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()), metaObject);    \n        this.setFieldValByName(\"createUser\", currrentUser.getNickname(), metaObject);\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        this.setFieldValByName(\"updateTime\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()), metaObject);\n\n    }\n}\n```\n\n\n\n","tags":["java","springboot","mybatis-plus","工具"],"categories":["从头创建一个新项目可能需要的配置"]},{"title":"网站介绍","url":"/2023/05/12/网站介绍/","content":"\n> 从2022年中开始，就已经有了创建自己的博客网站的想法，那个时候就找了使用hexo创建网站的文章，但那个时候没研究过前端，进度一直卡在一开始的node安装上，折腾出一个开始页面之后就有些懈怠了，再之后就不了了之。\n\n> 后来也有几次建站的想法，但因为毕业，找工作等原因一直搁置了，直到现在。\n\n> 我的本科是机械，因为对计算机行业的兴趣，在女朋友的支持下，转行到了互联网行业，目前在南京从事java后端的岗位。\n\n> 网站使用hexo框架，主题是butterfly。\n\n>网站的主页封面是原神中的角色，宵宫，是我在这个游戏中最爱的角色。我很爱她对生活的热情，同时也希望自己能对生活抱有更多的期待。\n\n>网站的名字取自我的外号以及女朋友的外号。之后我会在这个网站持续更新技术博客以及生活中的所思所想。\n\n> 未完待续...\n","tags":["博客","网站"],"categories":["记录"]}]